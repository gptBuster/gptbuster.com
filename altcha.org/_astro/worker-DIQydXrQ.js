(function(){"use strict";"crypto"in globalThis||(globalThis.crypto=require("node:crypto").webcrypto);const y=new TextEncoder;function h(t){return[...new Uint8Array(t)].map(e=>e.toString(16).padStart(2,"0")).join("")}async function d(t,e){return crypto.subtle.digest(t.toUpperCase(),typeof e=="string"?y.encode(e):new Uint8Array(e))}async function g(t,e){return h(await d(t,e))}function w(t,e,i="SHA-256",l=1e6,p=0){const o=new AbortController;return{promise:new Promise((r,s)=>{const n=Date.now(),f=a=>{o.signal.aborted||a>l?r(null):g(i,e+a).then(b=>{b===t?r({number:a,took:Date.now()-n}):f(a+1)}).catch(s)};f(p)}),controller:o}}let c;onmessage=async t=>{const{type:e,payload:i}=t.data;if(e==="abort")c?.abort(),c=void 0;else if(e==="work"){const{alg:l,challenge:p,max:o,salt:u,start:r}=i||{},s=w(p,u,l,o,r);c=s.controller,s.promise.then(n=>{self.postMessage(n&&{...n,worker:!0})})}}})();
